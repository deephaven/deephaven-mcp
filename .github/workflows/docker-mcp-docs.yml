name: Build and Publish MCP Docs Docker Image

# ============================================================================
# This workflow builds and publishes the mcp-docs Docker image to Google Artifact Registry
# and optionally triggers a redeploy via Terraform. It is intended for the Deephaven MCP Docs Server.
#
# REQUIREMENTS:
# - A Google Cloud service account with the following permissions:
#     * Artifact Registry Writer
#     * Cloud Run Admin
#     * Service Account User
#     * Storage Admin
# - The service account key JSON file must be stored as the GitHub secret: GH_ACTION_GCLOUD_JSON
# - The workflow builds on pushes and PRs to main, and can also be triggered manually.
#
# IMAGE LOCATION:
#   Artifact Registry: us-central1-docker.pkg.dev/deephaven-oss/deephaven-mcp/mcp-docs
#   Tags: 'prod' for main branch, 'dev' otherwise
# ============================================================================

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # The Artifact Registry repository path (update as needed)
  DOCKER_REPO: us-central1-docker.pkg.dev/deephaven-oss/deephaven-mcp

jobs:
  mcp-docs:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Authenticate to Google Cloud using the service account key from secrets
      - name: Authorize GCloud Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GH_ACTION_GCLOUD_JSON }}

      # Configure Docker to use gcloud as a credential helper for Artifact Registry
      # Configure Docker to use gcloud as a credential helper for Artifact Registry
      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Set the Docker image tag based on branch
      # - 'prod' for main branch
      # - 'dev' for all other branches/PRs
      - name: Set Docker image tag
        id: set_image_tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=prod"
            echo "IMAGE_TAG=prod" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=dev"
            echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          fi

      # Build and push the Docker image to Artifact Registry
      # Uses the Dockerfile in mcp-docs and tags as prod/dev accordingly
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: mcp-docs
          file: mcp-docs/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPO }}/mcp-docs:${{ env.IMAGE_TAG }}

  # ---------------------------------------------------------------------------
  # Redeploy job: triggers after image build/push, runs Terraform deployment
  # ---------------------------------------------------------------------------
  redeploy:
    runs-on: ubuntu-latest
    needs: [mcp-docs]
    steps:
      # Checkout the repository (required for deployment scripts)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set WORKSPACE environment variable based on branch
      # - 'prod' for main branch
      # - 'dev' for all other branches/PRs
      - name: Set Workspace
        id: set_workspace
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "WORKSPACE=prod"
            echo "WORKSPACE=prod" >> $GITHUB_ENV
          else
            echo "WORKSPACE=dev"
            echo "WORKSPACE=dev" >> $GITHUB_ENV
          fi

      # Authenticate to Google Cloud for deployment permissions
      - name: Authorize GCloud Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GH_ACTION_GCLOUD_JSON }}

      # Set up the Google Cloud SDK for Terraform/Cloud Run commands
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.4

      # Run the deployment script to redeploy the latest image
      # Expects run_terraform.sh to handle the actual redeploy logic
      - name: Deploy to Cloud Run
        run: |
          ./run_terraform.sh ${{ env.WORKSPACE }} redeploy-image
