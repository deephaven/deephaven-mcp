[project]
name = "deephaven-mcp-docs"
dynamic = ["version"]
description = "A Model Context Protocol (MCP) server for learning about Deephaven Data Labs documentation."
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Deephaven Data Labs", email = "support@deephaven.io" }
]
license = { text = "Apache-2.0" }
keywords = ["deephaven", "mcp", "model-context-protocol", "ai", "documentation"]
classifiers = [
    # TODO: Update development status when the project reaches a stable state
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing"
]
dependencies = [
    # Core dependencies for the docs MCP server
    # Networking, API, and web server
    "fastapi>=0.100.0",      # FastAPI web framework
    "uvicorn[standard]>=0.23.0", # ASGI server for FastAPI
    # OpenAI/LLM integration
    "openai>=1.0.0",         # OpenAI Python SDK
    # Data validation and settings
    "pydantic>=2.0.0",       # Data validation and parsing
    # Environment variable loading
    "python-dotenv>=1.0.0"   # Load .env files
]


[project.optional-dependencies]
# Testing (coverage, etc.)
test = [
    "pytest>=8.0.0", # Test framework
    "pytest-asyncio>=0.23.0", # Async test support
    "pytest-cov>=4.1.0",    # Code coverage reporting
]
dev = [
    # Code formatting and style
    "black>=24.0.0",  # Code formatter
    "ruff>=0.1.0",    # Linter and code quality tool
    "isort>=5.12.0",  # Import sorter

    # Type checking and static analysis
    "mypy>=1.6.0",  # Static type checker
    "types-aiofiles",  # Type stubs for aiofiles

    # Development and CI
    "pre-commit>=3.4.0",  # Git hooks management
    # "deephaven-server>=0.38.0",  # Required for testing against Deephaven

    # Testing (duplicate from [test] for setuptools compatibility)
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "httpx[cli]>=0.24.0"
]


[project.urls]
Homepage = "https://deephaven.io"
Documentation = "https://deephaven.io/docs/"
Repository = "https://github.com/deephaven/deephaven-mcp"
Issues = "https://github.com/deephaven/deephaven-mcp/issues"

[project.scripts]
dh-mcp-docs = "deephaven_mcp.docs.__main__:main"

[tool.uv]
package = true

[build-system]
requires = ["setuptools>=61.0", "setuptools_scm[toml]>=7.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/deephaven_mcp/_version.py"
version_scheme = "post-release"
local_scheme = "node-and-date"
fallback_version = "0.0.0"

# Black configuration for code formatting
[tool.black]
line-length = 88
target-version = ["py310"]

# Ruff configuration for linting and code quality
[tool.ruff]

[tool.ruff.lint]
select = ["E", "F", "I", "B", "C", "U", "Q", "S"]  # Select specific linting rules
ignore = ["E501"]  # Ignore line length warnings since we use black

# Isort configuration for import sorting
[tool.isort]
profile = "black"  # Use black's style for import sorting

# Pytest configuration for testing
[tool.pytest.ini_options]
testpaths = ["tests"]  # Directory containing test files
addopts = "--cov=deephaven_mcp --cov-report=term-missing"  # Enable code coverage reporting
python_files = ["test_*.py"]  # Test file naming pattern
python_classes = ["Test"]  # Test class naming pattern
python_functions = ["test_"]  # Test function naming pattern

# Mypy configuration for type checking
[tool.mypy]
python_version = "3.10"  # Target Python version
ignore_missing_imports = true  # Allow imports that may not be present at runtime
strict_optional = true  # Enable strict optional checking
warn_unused_ignores = true  # Warn about unused # type: ignore comments
warn_redundant_casts = true  # Warn about unnecessary casts
warn_unused_configs = true  # Warn about unused mypy.ini settings
warn_no_return = true  # Warn about functions without return statements
warn_return_any = true  # Warn about functions returning Any
warn_unreachable = true  # Warn about unreachable code
disallow_untyped_defs = true  # Require type annotations for function definitions
disallow_incomplete_defs = true  # Require complete type annotations
disallow_untyped_decorators = true  # Require decorators to be typed
disallow_untyped_calls = true  # Require all function calls to be type checked
